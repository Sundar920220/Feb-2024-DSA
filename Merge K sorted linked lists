Given K sorted linked lists of different sizes. The task is to merge them in such a way that after merging they will be a single sorted linked list.

class Solution
{
    //Function to merge K sorted linked list.
    Node merge(Node a,Node b){
        if(a==null) return b;
        if(b==null) return a;
        if(a.data<b.data){
            a.next=merge(a.next,b);
            return a;
        }else{
            b.next=merge(a,b.next);
            return b;
        }
    }
    Node mergeKList(Node[]arr,int K)
    {
        //Add your code here.
        int N=K;
        int last=N-1;
        while(last!=0){
            int i=0;
            int j=last;
            while(i<j){
                arr[i]=merge(arr[i],arr[j]);
                i++;
                j--;
                if(i>=j){
                    last=j;
                }
            }
        }
        return arr[0];
    }
}

Time Complexity : O(N*K*log(K)) 
Space Complexity : O(K+max(length(a),length(b))).

